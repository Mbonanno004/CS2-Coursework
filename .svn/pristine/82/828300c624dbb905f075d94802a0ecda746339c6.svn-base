//
// File: stack.hpp
//
// Programmer:  Michael Bonanno
// Date:        Spring 2025
//
//
//  Do not change the names of the classes or methods.  Otherwise, instructor
//  tests will not work.
//
#ifndef CS2_STACK_HPP_
#define CS2_STACK_HPP_

#include <iostream>
#include <new>
#include <cassert>
#include "../string/string.hpp"


template<typename T> 
class Node {
public:
	T data;
	node<T> *next;
private:
};


// CLASS INV:
//
template <typename T>
class stack {
public:
              stack     ();
              stack     (const stack<T>&);
              ~stack    ();
    void      swap      (stack<T>&);
    stack<T>& operator= (stack<T>);
    
	bool      empty     () const;
	bool      full      () const;
	T         top       () const;
	T         pop       ();
	void      push      (const T&);

private:
	Node<T>   *tos;
};

template <typename T>
stack<T>::stack() {

}

template <typename T>
stack<T>::stack(const stack<T>& actual) {

}

template <typename T>
stack<T>::~stack() {

}

template <typename T>
void stack<T>::swap(stack<T>& rhs) {

}

template <typename T>
stack<T>& stack<T>::operator=(stack<T> rhs) {

}

template <typename T>
bool stack<T>::empty() const {

}

template <typename T>
bool stack<T>::full() const {
	
}

template <typename T>
T stack<T>::top() const {

}

template <typename T>
T stack<T>::pop() {

}

template <typename T>
void push(const T& push) {

}

#endif
