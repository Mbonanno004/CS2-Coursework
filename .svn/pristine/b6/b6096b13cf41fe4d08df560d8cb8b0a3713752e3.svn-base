// utilities cpp
//
// Michael Bonanno
//
// Project 3 Milestone 2

#include <iostream>
#include "utilities.hpp"

String infixToPostfix(String infix) {
    if (infix.length() == 0) return String();

    std::vector<String> expression;
    expression = infix.split(' ');

    stack<String> s;
    String lhs, rhs, op;
    String token;

    int i = 0;
    while (expression[i] != ';') {
        token = expression[i];
        ++i;
        if (token == ')') {
            rhs = s.pop();
            op = s.pop();
            lhs = s.pop();
            s.push(lhs + rhs + op);
        } else if (token != '(' && token != '\r') {
            s.push(token);
        } 
    }
    return s.pop();
}

// Your gonna have to change your infixToPostfix function so that the string has spaces 
// between each token, as it is now your you wont be able to split the postfix expression
// into different tokens to then turn it into assebly
String posftfixToAssembly(String postfix) {


}