//
//
// File:        logentry.cpp  
//       
// Version:     1.0
// Date:        
// Author:      
//
// Description: Class implementation for a log entry.
//
//
 
#include "string.hpp"
#include "logentry.hpp"
#include <iostream>
#include <vector>

// REQUIRES:
// ENSURES:
LogEntry::LogEntry(const String& line) {
    //Use split to create LogEntry
    //std::vector<String> logEntryParts = line.split(' ');
    std::vector<String> logEntryParts = line.split(' ');
    
    if (logEntryParts.size() != 10) {
        host = String("");
        date = Date();
        time = Time();
        request = String("");
        status = String("");
        number_of_bytes = 0;
        return;
    }

    host = logEntryParts[1];

    String temp = logEntryParts[4];
    temp = temp.substr(1, temp.length());
    std::vector<String> vTime = temp.split(':');
    String tempDate = vTime[1];
    time = Time(vTime[2], vTime[3], vTime[4]);
    std::vector<String> vDate = temp.split('/');
    date = Date(vDate[1], vDate[2], vDate[3]);


    date;

    time;

    request = logEntryParts[5] + logEntryParts[6] + logEntryParts[7];
    request = request.substr(1, request.length() - 1);

    status = logEntryParts[8];

    number_of_bytes = int(logEntryParts[9]);
}

// REQUIRES:
// ENSURES:
std::vector<LogEntry> parse(std::istream& in) {
    std::vector<LogEntry> result;

    return result;
}

// REQUIRES:
// ENSURES:
void output_all(std::ostream& out, const std::vector<LogEntry>&) {
    
}

// REQUIRES:
// ENSURES:
void by_host(std::ostream& out, const std::vector<LogEntry>&) {

}

// REQUIRES:
// ENSURES:
int byte_count(const std::vector<LogEntry>&) {
    
    return 0;
}

