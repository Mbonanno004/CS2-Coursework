//
//
// File:        logentry.cpp  
//       
// Version:     1.0
// Date:        
// Author:      
//
// Description: Class implementation for a log entry.
//
//
 
#include "string.hpp"
#include "logentry.hpp"
#include <iostream>
#include <vector>

// REQUIRES: logEntryParts.size() == 10
// ENSURES: Empty Log is empty, 
LogEntry::LogEntry(const String& line) {
    //Use split to create LogEntry
    //std::vector<String> logEntryParts = line.split(' ');
    std::vector<String> logEntryParts = line.split(' ');
    
    if (logEntryParts.size() != 10) {
        host = String("");
        date = Date();
        time = Time();
        timezone = String("");
        request = String("");
        status = String("");
        number_of_bytes = 0;
        return;
    }

    host = logEntryParts[1];

    //ex: 131.123.47.176 - - [18/Sep/2002:12:05:25 -0400] "GET /~darci/ HTTP/1.0" 200 5625

    String temp = logEntryParts[4];                                         // ex: [18/Sep/2002:12:05:25
    temp = temp.substr(1, temp.length());                                   // temp = 18/Sep/2002:12:05:25
    std::vector<String> vTime = temp.split(':');                            // vTime = "18/Sep/2002", "12", "05", "25"
    String tempDate = vTime[1];                                             // tempDate = 18/Sep/2002
    std::vector<String> vDate = tempDate.split('/');                        // vDate = "18", "Sep", "2002"

    time = Time(vTime[2], vTime[3], vTime[4]);                              // time = (12, 05, 25)
    timezone = logEntryParts[5].substr(1, logEntryParts[5].length() - 1); 
    date = Date(vDate[1], vDate[2], vDate[3]);                              // date = (18, Sep, 2002)


    request = logEntryParts[6] + logEntryParts[7] + logEntryParts[8];       
    request = request.substr(1, request.length() - 2);                      // request = Get /~darci/ HTTP/1.0"

    status = logEntryParts[9];

    number_of_bytes = logEntryParts[10];                                    // with operator int() implementation in string files this
}                                                                           // should work as intended. String to int

// REQUIRES:
// ENSURES:
std::vector<LogEntry> parse(std::istream& in) {
    std::vector<LogEntry> result;

    return result;
}

// REQUIRES:
// ENSURES:
void output_all(std::ostream& out, const std::vector<LogEntry>& logs) {
    int size = logs.size();
    for (int i = 0; i < size; ++i) {
        logs[i]
    }
}

// REQUIRES:
// ENSURES:
void by_host(std::ostream& out, const std::vector<LogEntry>&) {

}

// REQUIRES:
// ENSURES:
int byte_count(const std::vector<LogEntry>&) {
    
    return 0;
}

