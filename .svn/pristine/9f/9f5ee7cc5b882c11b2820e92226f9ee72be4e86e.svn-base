// utilities cpp
//
// Michael Bonanno
//
// Project 3 Milestone 2

#include <iostream>
#include "utilities.hpp"

String infixToPostfix(const String& infix) {
    if (infix.length() == 0) return String();

    std::vector<String> expression;
    expression = infix.split(' ');

    stack<String> s;
    String lhs, rhs, op;
    String token;

    int i = 0;
    while (expression[i] != ';') {
        token = expression[i];
        ++i;
        if (token == ')') {
            rhs = s.pop();
            op = s.pop();
            lhs = s.pop();
            s.push(lhs + " " + rhs + " " + op);
        } else if (token != '(' && token != '\r') {
            s.push(token);
        } 
    }
    return s.pop();
}

std::ostream& posftfixToAssembly(std::ostream& out, const String& postfix) {
    if (postfix.length() == 0) return;

    std::vector<String> tokens = postfix.split(' ');
    stack<String> s;
    int size = tokens.size();
    
    for (int i = 0; i < size; ++i) {
        String token = tokens[i];
        if ()
    }
}

bool isOperand(char ch) {
	return ('0' <= ch) && (ch <= '9');
}

bool isOperator(char ch) {
	return ch == '+' || ch == '-' || ch == '*' || ch == '/';
}

int evaluate(int lhs, char op, int rhs) {
	switch (op) {
		case '+' : return lhs + rhs;
		case '-' : return lhs - rhs;
		case '*' : return lhs * rhs;
		case '/' : return lhs / rhs;
	}
	return 0;
}