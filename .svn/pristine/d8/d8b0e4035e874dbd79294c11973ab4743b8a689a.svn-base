//
// File: stack.hpp
//
// Programmer:  Michael Bonanno
// Date:        Spring 2025
//
//
//  Do not change the names of the classes or methods.  Otherwise, instructor
//  tests will not work.
//
#ifndef CS2_STACK_HPP_
#define CS2_STACK_HPP_

#include <iostream>
#include <new>
#include <cassert>
#include "/users/kent/student/mbonann2/cs23001/string/string.hpp"


template<typename T> 
class Node {
public:
	T data;
	Node<T> *next;

	Node(const T& dataValue, Node<T> *nextNode = 0) : data(dataValue), next(nextNode) {};
};

// CLASS INV:
//
template <typename T>
class stack {
public:
              stack     () : tos(0) {};	   // Default Ctor
              stack     (const stack<T>&); // Copy Ctor
              ~stack    ();				   // Destructor
    void      swap      (stack<T>&);	   // Constant time swap
    stack<T>& operator= (const stack<T>&);		   // Overloaded assignment
    
	bool      empty     () const;		   // Checks if stack is empty
	bool      full      () const;		   // Checks if stack is full
	T         top       () const;          // Returns top of stack data, tos->data
	T         pop       ();				   // Pops item of top of stack and returns its data
	void      push      (const T&);		   // Adds item to top of stack

private:
	Node<T>   *tos;
};

template <typename T>
stack<T>::stack(const stack<T>& actual) {
	if (actual.tos == 0) {
		tos = 0; 
		return;
	}

	tos = new Node<T>(actual.tos->data);
	Node<T> *bottom = tos;
	Node<T> *temp   = actual.tos->next;

	while (temp != 0) {
		bottom->next = new Node<T>(temp->data);
		bottom = bottom->next;
		temp   = temp->next;
	}
}

template <typename T>
stack<T>::~stack() {
	while(tos != 0) {
		Node<T> *temp;
		temp = tos;
		tos  = tos->next;
		delete temp;
	}
}

template <typename T>
void stack<T>::swap(stack<T>& rhs) {
	Node<T> *temp = tos;
	tos 		  = rhs.tos;
	rhs.tos 	  = temp;
}

template <typename T>
stack<T>& stack<T>::operator=(const stack<T> &rhs) {
	if (this != &rhs) {
		stack<T> temp(rhs);
		swap(temp);
	}
	return *this;
}

template <typename T>
bool stack<T>::empty() const {
	return tos == 0;
}

template <typename T>
bool stack<T>::full() const {
	Node<T> *temp = new(std::nothrow) Node<T>();
	if (temp == 0) return true;
	delete temp;
	return false;
}

template <typename T>
T stack<T>::top() const {
	assert(!empty());
	return tos->data;
}

template <typename T>
T stack<T>::pop() {
	assert(!empty());

	T result      = tos->data;
	Node<T> *temp = tos;
	tos 		  = tos->next;
	delete temp;
	return result;
}

template <typename T>
void stack<T>::push(const T& item) {
	assert(!full());

	Node<T> *temp = new Node<T>(item);
	temp->next = tos;
	tos = temp;
}

#endif